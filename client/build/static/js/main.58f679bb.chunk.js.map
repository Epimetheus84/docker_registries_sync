{"version":3,"sources":["components/ImagesList.js","components/Home.js","components/Settings.js","App.js","serviceWorker.js","index.js"],"names":["ALL_REPOS","ImagesList","props","console","log","state","filteredImages","images","selectedRepo","selectRepo","bind","e","repo","target","value","this","setState","prevProps","title","selected","handleChange","FormControl","className","InputLabel","shrink","Select","onChange","key","Object","keys","map","multiple","native","image","tag","React","Component","Home","srcImages","dstImages","selectedDev","selectedProd","semWaiting","getReposData","axios","get","then","res","data","catch","err","event","options","i","l","length","push","url","alert","post","proceed","status","duplicates","join","window","confirm","force","handleChangeMultiple","Button","variant","color","onClick","moveImage","endIcon","startIcon","removeImage","to","Settings","configs","saving","subkey","src_registry","noValidate","autoComplete","FormGroup","row","TextField","fullWidth","id","label","ADDRESS","margin","USERNAME","PASSWORD","dst_registry","prefixes","split","FormControlLabel","control","Checkbox","checked","force_sync","inputProps","save","App","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58f679bb.chunk.js","sourcesContent":["import React from 'react'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\n\nconst ALL_REPOS = '*'\n\nclass ImagesList extends React.Component {\n    constructor(props) {\n        console.log(props)\n        super(props)\n        this.state = {\n            filteredImages: props.images,\n            selectedRepo: ALL_REPOS\n        }\n        this.selectRepo = this.selectRepo.bind(this)\n    }\n\n    selectRepo(e) {\n        const repo = e.target.value\n        const {images} = this.props\n        if (repo === ALL_REPOS) {\n            this.setState({\n                filteredImages: images,\n                selectedRepo: ALL_REPOS\n            })\n            return\n        }\n        let filteredImages = {}\n        filteredImages[repo] = images[repo]\n        this.setState({\n            filteredImages: filteredImages,\n            selectedRepo: repo\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.images === this.props.images) return\n\n        this.setState({\n            filteredImages: this.props.images\n        })\n    }\n\n    render() {\n        const { title, images, selected, handleChange } = this.props\n        const { filteredImages, selectedRepo } = this.state\n        return (\n            <FormControl className='form-control'>\n                <InputLabel shrink>\n                    {title}\n                </InputLabel>\n                <Select\n                    value={selectedRepo}\n                    onChange={this.selectRepo}\n                    className=\"select-repo\"\n                >\n                    <option key={ALL_REPOS} value={ALL_REPOS}>Все репозитории</option>\n                    {Object.keys(images).map(repo => {\n                        return (\n                            <option key={repo} value={repo}>\n                                {repo}\n                            </option>\n                        )\n                    })}\n                </Select>\n                <Select\n                    multiple\n                    native\n                    value={selected}\n                    onChange={handleChange}\n                >\n                    {Object.keys(filteredImages).map(image => {\n                        return filteredImages[image].map(tag => {\n                            const key = image + ':' + tag\n                            return (\n                                <option key={key} value={key}>\n                                    {key}\n                                </option>\n                            )\n                        })\n                    })}\n                </Select>\n            </FormControl>\n        )\n    }\n}\n\nexport default ImagesList","import React from 'react'\nimport axios from 'axios'\nimport ImagesList from \"./ImagesList\"\nimport Button from '@material-ui/core/Button'\nimport Delete from '@material-ui/icons/Delete'\nimport ArrowBack from '@material-ui/icons/ArrowBack'\nimport ArrowForward from '@material-ui/icons/ArrowForward'\nimport SettingsApplications from '@material-ui/icons/SettingsApplications'\nimport { Link } from \"react-router-dom\"\n\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            srcImages: {},\n            dstImages: {},\n            selectedDev: [],\n            selectedProd: [],\n            semWaiting: 2\n        }\n        this.getReposData()\n    }\n\n    getReposData() {\n        axios.get('http://localhost:8080/api/images/src').then(res => {\n            const images = res.data\n            this.setState({\n                srcImages: images,\n                semWaiting: this.state.semWaiting - 1\n            })\n        }).catch(err => {\n            console.log(err)\n            this.setState({\n                semWaiting: this.state.semWaiting - 1\n            })\n        })\n\n        axios.get('http://localhost:8080/api/images/dst').then(res => {\n            const images = res.data\n            this.setState({\n                dstImages: images,\n                semWaiting: this.state.semWaiting - 1\n            })\n        }).catch(err => {\n            console.log(err)\n            this.setState({\n                semWaiting: this.state.semWaiting - 1\n            })\n        })\n    }\n\n    handleChangeMultiple(event) {\n        const { options } = event.target;\n        const value = [];\n        for (let i = 0, l = options.length; i < l; i += 1) {\n            if (options[i].selected) {\n                value.push(options[i].value);\n            }\n        }\n        return value\n    }\n\n    moveImage(image) {\n        const { selectedDev, selectedProd } = this.state\n        let selected = selectedDev\n        let url = 'dst'\n        if (selectedProd.length > 0) {\n            selected = selectedProd\n            url = 'src'\n        }\n        if (selected.length === 0) alert('Choose image(s)');\n        this.setState({\n            semWaiting: 2\n        })\n        axios.post('http://localhost:8080/api/move/to_' + url, {\n            images: selected\n        }).then(res => {\n            this.getReposData()\n        })\n    }\n\n    removeImage() {\n        const { selectedDev, selectedProd } = this.state\n        let selected = selectedDev\n        let url = 'src'\n        if (selectedProd.length > 0) {\n            selected = selectedProd\n            url = 'dst'\n        }\n        if (selected.length === 0) alert('Choose image(s)');\n        this.setState({\n            semWaiting: 2\n        })\n\n        let proceed = 0\n        for (const image of selected) {\n            axios.post('http://localhost:8080/api/remove/' + url, {\n                image: image\n            }).then(res => {\n                const data = res.data\n                if (data.status === 'warning') {\n                    console.log(data)\n                    const duplicates = data.duplicates.join('\\n')\n                    const force = window.confirm(\n                        'Внимание! \\n' +\n                        'Удалив этот тег, вы также удалите его дупликаты:\\n' +\n                        duplicates +\n                        '\\n' +\n                        'Продолжить?'\n                    )\n                    if (force === true) {\n                        axios.post('http://localhost:8080/api/remove/' + url, {\n                            image: image,\n                            force: 1\n                        }).then(res => {\n                            if (++proceed === selected.length) this.getReposData()\n                        }).catch(err => {\n                            console.log(err)\n                            if (++proceed === selected.length) this.getReposData()\n                        })\n                    } else {\n                        if (++proceed === selected.length) this.getReposData()\n                    }\n                    return\n                }\n                if (++proceed === selected.length) this.getReposData()\n            }).catch(err => {\n                console.log(err)\n                if (++proceed === selected.length) this.getReposData()\n            })\n        }\n    }\n\n    render() {\n        const {srcImages, dstImages, selectedDev, selectedProd, semWaiting} = this.state\n        console.log(semWaiting)\n        return (\n            <div className='App'>\n                { semWaiting > 0 && <div className='preloader'>\n                    <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n                </div> }\n                <div className='images-list'>\n                    <ImagesList\n                        images={srcImages}\n                        title=\"src\"\n                        selected={selectedDev}\n                        handleChange={(event) => {\n                            this.setState({\n                                selectedProd: [],\n                                selectedDev: this.handleChangeMultiple(event)\n                            })\n                        }}\n                    />\n                </div>\n                <div className='actions-list'>\n                    { selectedDev.length > 0 && <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={()=>{this.moveImage()}}\n                            endIcon={<ArrowForward />}\n                        >\n                            Копировать на prod\n                        </Button>\n                    </div>}\n                    { selectedProd.length > 0 && <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={()=>{this.moveImage()}}\n                            startIcon={<ArrowBack />}\n                        >\n                            Копировать на dev\n                        </Button>\n                    </div>}\n                    <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={()=>{this.removeImage()}}\n                            endIcon={<Delete />}\n                        >\n                            Удалить\n                        </Button>\n                    </div>\n                </div>\n                <div className='images-list'>\n                    <ImagesList\n                        images={dstImages}\n                        title=\"dst\"\n                        selected={selectedProd}\n                        handleChange={(event) => {\n                            this.setState({\n                                selectedDev: [],\n                                selectedProd: this.handleChangeMultiple(event)\n                            })\n                        }}\n                    />\n                </div>\n                <div className=\"settings-btn\">\n                    <Link to=\"/settings\">\n                        <SettingsApplications />\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home","import React from 'react'\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport ArrowBack from '@material-ui/icons/ArrowBack'\nimport { Link } from \"react-router-dom\"\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            configs: {},\n            saving: false\n        }\n        axios.get('/api/get_settings').then(res => {\n            this.setState({\n                configs: res.data\n            })\n        })\n    }\n\n    handleChange(value, key, subkey) {\n        const { configs } = this.state\n        if (!! subkey) {\n            configs[key][subkey] = value\n        } else {\n            configs[key] = value\n        }\n        this.setState({\n            configs: configs\n        })\n    }\n\n    save() {\n        this.setState({saving: true})\n        axios.post('/api/save_settings', this.state.configs).then(res => {\n            this.setState({saving: false})\n        }).catch((err) => {\n            this.setState({saving: false})\n            alert(err)\n        })\n    }\n\n    render() {\n        const { configs } = this.state\n        if (!!!configs.src_registry) return 'Waiting...'\n        return (\n            <form noValidate autoComplete=\"off\" className=\"settings-form\">\n                <h2>Настройки синхронизации</h2>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_address\"\n                        label=\"SRC Address\"\n                        value={configs.src_registry.ADDRESS}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'ADDRESS')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_login\"\n                        label=\"SRC Auth username\"\n                        value={configs.src_registry.USERNAME}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'USERNAME')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_password\"\n                        label=\"SRC Password\"\n                        value={configs.src_registry.PASSWORD}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'PASSWORD')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_address\"\n                        label=\"DST Address\"\n                        value={configs.dst_registry.ADDRESS}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'ADDRESS')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_username\"\n                        label=\"DST Auth username\"\n                        value={configs.dst_registry.USERNAME}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'USERNAME')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_password\"\n                        label=\"DST Password\"\n                        value={configs.dst_registry.PASSWORD}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'PASSWORD')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"prefixes\"\n                        label=\"Префиксы тегов через запятую (оставьте поле пустым, если необходимо синхронизировать все теги)\"\n                        value={\n                            configs.prefixes.join(', ')\n                        }\n                        onChange={(e) => {\n                            let value = e.target.value\n                            value = value.split(', ')\n                            this.handleChange(value, 'prefixes')\n                        }}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={configs.force_sync}\n                                onChange={(e) => { this.handleChange(e.target.checked, 'force_sync')}}\n                                value=\"force_sync\"\n                                inputProps={{\n                                    'aria-label': 'primary checkbox',\n                                }}\n                            />\n                        }\n                        label=\"Удалять дублирующиеся теги\"\n                    />\n                </FormGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={()=>{this.save()}}\n                >\n                    { this.state.saving === false ? 'Сохранить' : 'Сохраняется...' }\n                </Button>\n                <Link to=\"/\" className=\"return-btn\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"default\"\n                        startIcon={<ArrowBack />}\n                    >\n                        Вернуться\n                    </Button>\n                </Link>\n            </form>\n        )\n    }\n}\n\nexport default Settings","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"\nimport Home from './components/Home.js'\nimport Settings from './components/Settings.js'\nimport './App.css'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/settings\">\n                        <Settings />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}