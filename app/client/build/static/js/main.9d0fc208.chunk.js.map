{"version":3,"sources":["components/ImagesList.js","components/Log.js","components/Home.js","components/Settings.js","App.js","serviceWorker.js","index.js"],"names":["ALL_REPOS","ImagesList","props","state","filteredImages","images","selectedRepo","selectRepo","bind","e","repo","target","value","this","setState","prevProps","title","selected","handleChange","FormControl","className","InputLabel","shrink","Select","onChange","key","Object","keys","map","multiple","native","image","tag","name","created","date","moment","format","React","Component","Log","data","values","log","time","class","Home","srcImages","dstImages","selectedDev","selectedProd","logs","semWaiting","configs","src_registry","ADDRESS","dst_registry","axios","get","then","res","checkApiAvailability","document","check","reverse","status","getReposData","console","setTimeout","catch","err","window","alert","event","options","i","l","length","push","url","post","confirm","join","confirmed","duplicatesConfirmationString","hasOwnProperty","Array","isArray","currentDate","Date","getHours","getMinutes","getSeconds","unshift","handleChangeMultiple","Button","variant","color","onClick","moveImages","endIcon","startIcon","removeImages","reload","to","Settings","saving","subkey","noValidate","autoComplete","FormGroup","row","TextField","fullWidth","id","label","margin","USERNAME","PASSWORD","repositories","replace","split","prefixes","FormControlLabel","control","Checkbox","checked","force_sync","inputProps","save","App","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d0fc208.chunk.js","sourcesContent":["import React from 'react'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport moment from 'moment'\n\nconst ALL_REPOS = '*'\n\nclass ImagesList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            filteredImages: props.images,\n            selectedRepo: ALL_REPOS\n        }\n        this.selectRepo = this.selectRepo.bind(this)\n    }\n\n    selectRepo(e) {\n        const repo = e.target.value\n        const {images} = this.props\n        if (repo === ALL_REPOS) {\n            this.setState({\n                filteredImages: images,\n                selectedRepo: ALL_REPOS\n            })\n            return\n        }\n        let filteredImages = {}\n        filteredImages[repo] = images[repo]\n        this.setState({\n            filteredImages: filteredImages,\n            selectedRepo: repo\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.images === this.props.images) return\n\n        let filteredImages = []\n        let selectedRepo = ALL_REPOS\n        if (this.state.selectedRepo !== ALL_REPOS\n            && !!this.props.images[this.state.selectedRepo]) {\n            filteredImages[this.state.selectedRepo] = this.props.images[this.state.selectedRepo]\n            selectedRepo = this.state.selectedRepo\n        } else {\n            filteredImages = this.props.images\n        }\n\n        this.setState({\n            filteredImages: filteredImages,\n            selectedRepo: selectedRepo\n        })\n    }\n\n    render() {\n        const { title, images, selected, handleChange } = this.props\n        const { filteredImages, selectedRepo } = this.state\n        return (\n            <FormControl className='form-control'>\n                <InputLabel shrink>\n                    {title}\n                </InputLabel>\n                <Select\n                    value={selectedRepo}\n                    onChange={this.selectRepo}\n                    className=\"select-repo\"\n                >\n                    <option key={ALL_REPOS} value={ALL_REPOS}>Все репозитории</option>\n                    {Object.keys(images).map(repo => {\n                        return (\n                            <option key={repo} value={repo}>\n                                {repo}\n                            </option>\n                        )\n                    })}\n                </Select>\n                <Select\n                    multiple\n                    native\n                    value={selected}\n                    onChange={handleChange}\n                >\n                    {Object.keys(filteredImages).map(image => {\n                        return filteredImages[image].map(tag => {\n                            const key = image + ':' + tag.name\n                            const created = tag.created * 1000\n                            const date = moment(created).format(\"DD.MM.YYYY\")\n                            return (\n                                <option key={key} value={key}>\n                                    {key} ({ date })\n                                </option>\n                            )\n                        })\n                    })}\n                </Select>\n            </FormControl>\n        )\n    }\n}\n\nexport default ImagesList","import React from 'react'\n\nclass Log extends React.Component {\n    render() {\n        const {data} = this.props\n        return (\n            <div>\n                {Object.values(data).map(log => {\n                    return <div><span className=\"time\">{log.time}</span><span className={log.class}>{log.value}</span></div>\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Log","import React from 'react'\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button'\nimport Delete from '@material-ui/icons/Delete'\nimport ArrowBack from '@material-ui/icons/ArrowBack'\nimport ArrowForward from '@material-ui/icons/ArrowForward'\nimport Autorenew from '@material-ui/icons/Autorenew'\nimport SettingsApplications from '@material-ui/icons/SettingsApplications'\nimport { Link } from \"react-router-dom\"\n\nimport ImagesList from \"./ImagesList\"\nimport Log from \"./Log\"\n\nconst STATUS_AVAILABLE = 'available'\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            srcImages: {},\n            dstImages: {},\n            selectedDev: [],\n            selectedProd: [],\n            logs: [],\n            semWaiting: 2,\n            configs: {\n                src_registry: {\n                    ADDRESS: ''\n                },\n                dst_registry: {\n                    ADDRESS: ''\n                }\n            }\n        }\n        axios.get('/api/get_settings').then(res => {\n            this.setState({\n                configs: res.data\n            })\n        })\n        this.log = this.log.bind(this)\n        this.checkApiAvailability = this.checkApiAvailability.bind(this)\n        this.checkApiAvailability()\n    }\n\n    componentDidMount() {\n        document.title = 'Registry-MGR'\n    }\n\n    checkApiAvailability() {\n        const tm = 5 * 1000\n        const check = () => {\n            axios.get('/api/are_you_busy')\n                .then(res => {\n                    res.data.logs.reverse()\n                    const logs = res.data.logs\n                    if (res.data.status === STATUS_AVAILABLE) {\n                        this.getReposData()\n                    } else {\n                        this.setState({\n                            semWaiting: 2\n                        })\n                    }\n                    console.log(tm)\n                    if (logs !== this.state.logs) {\n                        this.setState({\n                            logs: logs\n                        })\n                    }\n                    setTimeout(check, tm)\n                })\n                .catch(err => {\n                    window.alert(err)\n                })\n        }\n        check()\n    }\n\n    reload() {\n        this.setState({\n            semWaiting: 2\n        })\n        this.getReposData()\n    }\n\n    getReposData() {\n        axios.get('/api/images/src').then(res => {\n            const images = res.data\n            this.setState({\n                srcImages: images,\n                semWaiting: this.state.semWaiting - 1\n            })\n        }).catch(err => {\n            console.log(err)\n            this.setState({\n                semWaiting: this.state.semWaiting - 1\n            })\n        })\n\n        axios.get('/api/images/dst').then(res => {\n            const images = res.data\n            this.setState({\n                dstImages: images,\n                semWaiting: this.state.semWaiting - 1\n            })\n        }).catch(err => {\n            console.log(err)\n            this.setState({\n                semWaiting: this.state.semWaiting - 1\n            })\n        })\n    }\n\n    handleChangeMultiple(event) {\n        const { options } = event.target;\n        const value = [];\n        for (let i = 0, l = options.length; i < l; i += 1) {\n            if (options[i].selected) {\n                value.push(options[i].value);\n            }\n        }\n        return value\n    }\n\n    moveImages() {\n        const { selectedDev, selectedProd } = this.state\n        let selected = selectedDev\n        let url = 'dst'\n\n        if (selectedProd.length > 0) {\n            selected = selectedProd\n            url = 'src'\n        }\n\n        if (selected.length === 0) alert('Choose image(s)');\n\n        this.setState({\n            semWaiting: 2\n        })\n\n        axios.post('/api/move/to_' + url, {\n            images: selected\n        }).then(res => {\n            this.checkApiAvailability()\n        }).catch(err => {\n            console.log(err)\n            this.getReposData()\n        })\n    }\n\n    removeImages() {\n        const { selectedDev, selectedProd } = this.state\n        let selected = selectedDev\n        let url = 'src'\n        if (selectedProd.length > 0) {\n            selected = selectedProd\n            url = 'dst'\n        }\n        if (selected.length === 0) {\n            alert('Choose image(s)')\n            return\n        }\n\n        if (!window.confirm('Вы уверены что хотите удалить эти теги?: \\n' + selected.join(';\\n'))) return\n\n        this.setState({\n            semWaiting: 2\n        })\n\n        axios.post('/api/check_if_can_be_removed/' + url, {\n            images: selected\n        }).then(res => {\n            let confirmed = 1\n            if (Object.keys(res.data).length > 0) {\n                let duplicatesConfirmationString = 'Внимание! \\n' +\n                    'Удалив следующие теги, вы также удалите и их дупликаты.'\n\n                for (const image in res.data) {\n                    if (!res.data.hasOwnProperty(image) || Array.isArray(res.data)) continue\n                    const duplicates = res.data[image]\n                    duplicatesConfirmationString += '\\nДля тега ' + image\n                    + ' дупликаты:\\n'\n                    + duplicates.join('\\n')\n                }\n\n                duplicatesConfirmationString += '\\nПродолжить?'\n\n                confirmed = window.confirm(duplicatesConfirmationString)\n            }\n\n            if (!confirmed) {\n                this.getReposData()\n                return\n            }\n\n            axios.post('/api/remove/' + url, {\n                 images: selected\n            }).then(res => {\n                 this.checkApiAvailability()\n            }).catch(err => {\n                 console.log(err)\n                 this.getReposData()\n            })\n        }).catch(err => {\n            console.log(err)\n            this.getReposData()\n        })\n    }\n\n    log(value, status = 'default') {\n        const currentDate = new Date()\n        const log = {\n            time: currentDate.getHours() + ':'\n                + currentDate.getMinutes() + ':'\n                + currentDate.getSeconds(),\n            value,\n            status\n        }\n        let logs = this.state.logs\n        logs.unshift(log)\n        this.setState({\n            logs: logs\n        })\n    }\n\n    render() {\n        const {srcImages, dstImages, selectedDev, selectedProd, semWaiting, configs} = this.state\n        return (\n            <div className='App'>\n                { semWaiting > 0 && <div className='preloader'>\n                    <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n                </div> }\n                <div className='images-list'>\n                    <ImagesList\n                        images={srcImages}\n                        title={'src ' + configs.src_registry.ADDRESS}\n                        selected={selectedDev}\n                        handleChange={(event) => {\n                            this.setState({\n                                selectedProd: [],\n                                selectedDev: this.handleChangeMultiple(event)\n                            })\n                        }}\n                    />\n                </div>\n                <div className='actions-list'>\n                    { selectedDev.length > 0 && <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={()=>{this.moveImages()}}\n                            endIcon={<ArrowForward />}\n                        >\n                            Копировать на dst\n                        </Button>\n                    </div>}\n                    { selectedProd.length > 0 && <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={()=>{this.moveImages()}}\n                            startIcon={<ArrowBack />}\n                        >\n                            Копировать на src\n                        </Button>\n                    </div>}\n                    <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={()=>{this.removeImages()}}\n                            endIcon={<Delete />}\n                        >\n                            Удалить\n                        </Button>\n                    </div>\n                    <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={()=>{this.reload()}}\n                            endIcon={<Autorenew />}\n                        >\n                            Обновить\n                        </Button>\n                    </div>\n                </div>\n                <div className='images-list'>\n                    <ImagesList\n                        images={dstImages}\n                        title={'dst ' + configs.dst_registry.ADDRESS}\n                        selected={selectedProd}\n                        handleChange={(event) => {\n                            this.setState({\n                                selectedDev: [],\n                                selectedProd: this.handleChangeMultiple(event)\n                            })\n                        }}\n                    />\n                </div>\n                <div className=\"settings-btn\">\n                    <Link to=\"/settings\">\n                        <SettingsApplications />\n                    </Link>\n                </div>\n                <div className=\"logs\">\n                    <Log data={this.state.logs} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home","import React from 'react'\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport ArrowBack from '@material-ui/icons/ArrowBack'\nimport { Link } from \"react-router-dom\"\n\nconst VERSION = 1.12\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            configs: {},\n            saving: false\n        }\n        axios.get('/api/get_settings').then(res => {\n            this.setState({\n                configs: res.data\n            })\n        })\n    }\n\n    componentDidMount() {\n        document.title = 'Registry-MGR'\n    }\n\n    handleChange(value, key, subkey) {\n        const { configs } = this.state\n        if (!! subkey) {\n            configs[key][subkey] = value\n        } else {\n            configs[key] = value\n        }\n        this.setState({\n            configs: configs\n        })\n    }\n\n    save() {\n        this.setState({saving: true})\n        axios.post('/api/save_settings', this.state.configs).then(res => {\n            this.setState({saving: false})\n        }).catch((err) => {\n            this.setState({saving: false})\n            alert(err)\n        })\n    }\n\n    render() {\n        const { configs } = this.state\n        if (!!!configs.src_registry) return 'Waiting...'\n        return (\n            <form noValidate autoComplete=\"off\" className=\"settings-form\">\n                <h2>Настройки синхронизации</h2>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_address\"\n                        label=\"SRC Address\"\n                        value={configs.src_registry.ADDRESS}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'ADDRESS')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_login\"\n                        label=\"SRC Auth username\"\n                        value={configs.src_registry.USERNAME}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'USERNAME')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_password\"\n                        label=\"SRC Password\"\n                        value={configs.src_registry.PASSWORD}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'PASSWORD')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_address\"\n                        label=\"DST Address\"\n                        value={configs.dst_registry.ADDRESS}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'ADDRESS')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_username\"\n                        label=\"DST Auth username\"\n                        value={configs.dst_registry.USERNAME}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'USERNAME')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_password\"\n                        label=\"DST Password\"\n                        value={configs.dst_registry.PASSWORD}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'PASSWORD')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"repositories\"\n                        label={ 'Необходимые репозитории через запятую' +\n                            '(оставьте поле пустым, если нужны все репозитории)' }\n                        value={\n                            configs.repositories.join(',')\n                        }\n                        onChange={(e) => {\n                            let value = e.target.value\n                            value = value.replace()\n                            value = value.replace(' ', '')\n                            value = value.replace('\\t', '')\n                            console.log(value)\n                            value = value.split(',')\n                            this.handleChange(value, 'repositories')\n                        }}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"prefixes\"\n                        label={ 'Префиксы тегов через запятую' +\n                            '(оставьте пустым, если нужны все теги)' }\n                        value={\n                            configs.prefixes.join(',')\n                        }\n                        onChange={(e) => {\n                            let value = e.target.value\n                            value = value.replace(' ', '')\n                            value = value.replace('\\t', '')\n                            value = value.split(',')\n                            this.handleChange(value, 'prefixes')\n                        }}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={configs.force_sync}\n                                onChange={(e) => { this.handleChange(e.target.checked, 'force_sync')}}\n                                value=\"force_sync\"\n                                inputProps={{\n                                    'aria-label': 'primary checkbox',\n                                }}\n                            />\n                        }\n                        label=\"Удалять дублирующиеся теги\"\n                    />\n                </FormGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={()=>{this.save()}}\n                >\n                    { this.state.saving === false ? 'Сохранить' : 'Сохраняется...' }\n                </Button>\n                <Link to=\"/\" className=\"return-btn\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"default\"\n                        startIcon={<ArrowBack />}\n                    >\n                        Вернуться\n                    </Button>\n                </Link>\n                <br/>\n                <span className=\"version\">Version: { VERSION }</span>\n            </form>\n        )\n    }\n}\n\nexport default Settings","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"\nimport Home from './components/Home.js'\nimport Settings from './components/Settings.js'\nimport './App.css'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/settings\">\n                        <Settings />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}